apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: 'Checkout'
description: 'Checkout a Git repository at a particular version'
inputs:
  provider:
    description: 'SCM provider that is hosting the repository. For example github, bitbucket, gitlab or custom'
    default: "${{ cloudbees.scm.provider }}"
  repository:
    description: 'Repository name with owner. For example, actions/checkout. Alternatively if provider is custom then this is the clone URL of the repository'
    default: "${{ cloudbees.scm.repository }}"
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
  cloudbees-api-token:
    description: >
      The CloudBees API Token to use for fetching SCM tokens unless `token` or `ssh-key` have been configured
    default: "${{ cloudbees.api.token }}"
  cloudbees-api-url:
    description: The CloudBees API root URL to use for fetching SCM tokens
    default: "${{ cloudbees.api.url }}"
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.
  ssh-key:
    description: >
      SSH key used to fetch the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands.
      The post-job step removes the SSH key.


      We recommend using a service account with the least permissions necessary.
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public keys for github.com, bitbucket.org and gitlab.com are always implicitly added.
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
      configure additional hosts.
    default: "true"
  persist-credentials:
    description: 'Whether to configure the token or SSH key with the local git config'
    default: "true"
  path:
    description: 'Relative path under $CLOUDBEES_WORKSPACE to place the repository'
  clean:
    description: 'Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
    default: "true"
  fetch-depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    default: "1"
  lfs:
    description: 'Whether to download Git-LFS files'
    default: "false"
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.


      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
      converted to HTTPS.
    default: "false"
  set-safe-directory:
    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory <path>`
    default: "true"
  github-server-url:
    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults (i.e. the GITHUB_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com
    required: false
  bitbucket-server-url:
    description: The base URL for the Bitbucket instance that you are trying to clone from, will use environment defaults (i.e. the BITBUCKET_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://bitbucket.org or https://my-bbdc-server.example.com
    required: false
  gitlab-server-url:
    description: The base URL for the GitLab instance that you are trying to clone from, will use environment defaults (i.e. the GITLAB_SERVER_URL environment variable) to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://gitlab.com or https://my-gl-server.example.com
    required: false
runs:
  using: composite
  steps:
    - name: Checkout
      uses: docker://public.ecr.aws/l7o7z1g8/actions/cloudbees-io-checkout:1.0.11
      # TODO: use interpolated tag once we aligned on the release process
      #uses: docker://registry.saas-dev.beescloud.com/staging/cloudbees-io-checkout:${{ action.scm.sha }}
      env:
        CLOUDBEES_EVENT_PATH: /cloudbees/event.json
      shell: sh
      run: |
        checkout \
          "--provider=${{ inputs.provider }}" \
          "--repository=${{ inputs.repository }}" \
          "--ref=${{ inputs.ref }}" \
          "--cloudbees-api-token=${{ inputs.cloudbees-api-token }}" \
          "--cloudbees-api-url=${{ inputs.cloudbees-api-url }}" \
          "--token=${{ inputs.token }}" \
          "--ssh-key=${{ inputs.ssh-key }}" \
          "--ssh-known-hosts=${{ inputs.ssh-known-hosts }}" \
          "--ssh-strict=${{ inputs.ssh-strict }}" \
          "--persist-credentials=${{ inputs.persist-credentials }}" \
          "--path=${{ inputs.path }}" \
          "--clean=${{ inputs.clean }}" \
          "--fetch-depth=${{ inputs.fetch-depth }}" \
          "--lfs=${{ inputs.lfs }}" \
          "--submodules=${{ inputs.submodules }}" \
          "--set-safe-directory=${{ inputs.set-safe-directory }}" \
          "--github-server-url=${{ inputs.github-server-url }}" \
          "--bitbucket-server-url=${{ inputs.bitbucket-server-url }}" \
          "--gitlab-server-url=${{ inputs.gitlab-server-url }}" \
